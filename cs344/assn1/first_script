#!/bin/bash

trap "rm -f ps$$; exit 1" INT HUP TERM

function proper_usage {
    echo "Usage: stats {-rows|-cols} [file]" >&2
    exit 1
}
function bad_file {
    echo "stats: cannot read $1" >&2
    exit 1
}

function round { #$1 is the denominator $2 result with rounding down $3 is the remainder (modulus))
    val=$2
    if [[ $3 < $(($1 / 2)) ]]
    then
        echo $2
    elif [[ $3 > $(($1 / 2)) ]]
    then
        echo $(($2 + 1))
    else
        if [[ $(($1 % 2)) > 0 ]]
        then
            echo $2
        else
            echo $(($2 + 1))
        fi
    fi
}

function row_median {

    IFS='	' read -a array <<< "$1"
    
    len=${#array[@]}

    if [[ $(($len % 2)) == 0 ]]
    then
        
        temp=$(())
        echo $(round 2 ${#array[@]} $((${#array[@]} % 2)))
    else
        echo $(( $len / 2 ))
    fi
}

function get_median {
    length=$(wc -l < $1)
    mid=$(($length / 2))
    mid=$(($mid + 1))
    if [[ $(($length % 2)) == 0 ]]
    then
        mid_1=$(($mid - 1))
        first=$(sed -n "${mid}p" "$1")
        second=$(sed -n "${mid_1}p" "$1")

        if [[ $first == $second ]]
        then
            echo $first
        else

            avg=$(round 2 $(($(($first + $second)) / 2)) $(($(($first + $second)) % 2)))
            echo $avg

        fi
    else
        echo $(sed -n "${mid}p" "$1")
    fi
}

function get_mean {
    
    total=0
    rows=0
    
    while read line
    do
        total=$(($total + $line))
        rows=$(($rows + 1))
    done < $1
    mean=$(round ${rows}  $((${total} / ${rows})) $(($total % ${rows})))
    echo $mean
}

function columns {
    TMP=ps$$

    first_line=$(head -1 $1)
    first_array=IFS='	' read -a array <<< "$first_line"
    num_cols=${#array[@]}

    for (( i=1; i<=num_cols; i++ ))
    do
        cut -d'	' -f${i} $1 > $TMP
        sort -n $TMP -o $TMP
        mean[${i}]=$(get_mean $TMP)
        median[${i}]=$(get_median $TMP)
    done

    mean[0]="Mean"
    median[0]="Median"
    printf "%s	" "${mean[@]}"
    echo ''
    printf "%s	" "${median[@]}"
    echo ''

    rm -f $TMP
}

function rows {
    echo "Average Median"
    TMP=ps$$

    while read line
    do
        name=$line

        num=0
        #from http://stackoverflow.com/questions/10586153/bash-split-string-into-array
        IFS='	' read -a array <<< "$name"
        for s in ${array[@]}  #iterates over elements of array
        do
            num=$(($num + $s))
        done
            # $1 is len of array, $2 is mean rounded down, $3 is modulus instead of division
            # The round function takes these values and makes this normal rounding instead of rounding down
        mean=$(round ${#array[@]}  $(($num / ${#array[@]})) $(($num % ${#array[@]})))

        printf "%s\n" "${array[@]}" > $TMP
        sort -n $TMP -o $TMP

        median=$(get_median $TMP)
        count=$(wc -l < $TMP)
        echo "$mean	$median"

        rm -f $TMP


    done < $1
}
function place_holder {

    while read line
    do
        name=$line

        num=0
        #from http://stackoverflow.com/questions/10586153/bash-split-string-into-array
        IFS='	' read -a array <<< "$name"
        for s in ${array[@]}  #iterates over elements of array
        do
            num=$(($num + $s))
        done
        echo $(($((${#array[@]}+1))/2))
        echo $num

    done < $2
}


if [[ $# -ne 2 ]]
then
    proper_usage
else
    if [[ -f $2 ]]
    then
        if [[ -r $2 ]]
        then
            if [[ ${1:1:1} == "c" ]]
            then
                columns $2
            elif [[ ${1:1:1} == "r" ]]
            then
                rows $2
            else
                proper_usage
            fi
        else
            bad_file $2
        fi
    else
        bad_file $2
    fi
fi
