#!/bin/bash

trap "rm -f ps$$; rm -f file_ps$$; exit 1" INT HUP TERM

function proper_usage {
    echo "Usage: stats {-rows|-cols} [file]" >&2
    exit 1
}
function bad_file {
    echo "stats: cannot read $1" >&2
    exit 1
}

function round { #$1 is the denominator 
                 #$2 result with integer division rounding down
                 #$3 is the remainder (modulus))
                 #returns result of division with 'normal' rounding
    val=$2
    if [[ $3 < $(($1 / 2)) ]]
    then
        echo $2
    elif [[ $3 > $(($1 / 2)) ]]
    then
        echo $(($2 + 1))
    else
        if [[ $(($1 % 2)) > 0 ]]
        then
            echo $2
        else
            echo $(($2 + 1))
        fi
    fi
}

function get_median {   #Accepts a file as input which has one integer on each line and nothing else
                        #Returns the median. It doesn't give the average between the two middle values
                        #if there is an even number of values.  It gives the larger of the two
    length=$(wc -l < $1)
    mid=$(($length / 2))
    mid=$(($mid + 1))
    if [[ $(($length % 2)) == 0 ]]
    then
        mid_1=$(($mid - 1))
        first=$(sed -n "${mid}p" "$1")
        second=$(sed -n "${mid_1}p" "$1")

        if [[ $first == $second ]]
        then
            echo $first
        elif [[ $first > $second ]]
        then
            echo $first
        else
            echo $second

#            avg=$(round 2 $(($(($first + $second)) / 2)) $(($(($first + $second)) % 2)))
#            echo $avg
#                   I assumed normal median logic so I had this implemented originally
#                   I need to read every sentance of the assignment before writing my code  :)

        fi
    else
        echo $(sed -n "${mid}p" "$1")
    fi
}

function get_mean { #Used only for columns case
                    #Accepts a file with one integer on each line
                    #Returns the mean of those integers
    total=0
    rows=0
    
    while read line
    do
        total=$(($total + $line))
        rows=$(($rows + 1))
    done < $1
    mean=$(round ${rows}  $((${total} / ${rows})) $(($total % ${rows})))
    echo $mean
}

function columns {  #This is called once we have a valid file with the -c command used
                    #It requires the valid file as a parameter
                    #It doesn't return anything, but it does output the results to stdout
    TMP=ps$$

    first_line=$(head -1 $1)
    first_array=IFS='	' read -a array <<< "$first_line"
    num_cols=${#array[@]}

    for (( i=1; i<=num_cols; i++ ))
    do
        cut -d'	' -f${i} $1 > $TMP
        sort -n $TMP -o $TMP
        mean[${i}]=$(get_mean $TMP)
        median[${i}]=$(get_median $TMP)
    done

    mean[0]="Mean"
    median[0]="Median"
    printf "%s	" "${mean[@]}"
    echo ''
    printf "%s	" "${median[@]}"
    echo ''

    rm -f $TMP
}

function rows {     #This function is called when the -r argument is chosen with a valid file as input
                    #It uses that valid file as an argument
                    #It doesn't return anything, but outputs the results to stdout
    
    TMP=ps$$
    echo "Average Median"   #This looks a bit silly here but it needs to be before the loop

    while read line
    do
        name=$line

        num=0
        #from http://stackoverflow.com/questions/10586153/bash-split-string-into-array
        IFS='	' read -a array <<< "$name"
        for s in ${array[@]}  #iterates over elements of array
        do
            num=$(($num + $s))
        done
            # $1 is len of array, $2 is mean rounded down, $3 is modulus instead of division
        mean=$(round ${#array[@]}  $(($num / ${#array[@]})) $(($num % ${#array[@]})))

        printf "%s\n" "${array[@]}" > $TMP
        sort -n $TMP -o $TMP

        median=$(get_median $TMP)
        count=$(wc -l < $TMP)
        echo "$mean	$median"

        rm -f $TMP
    done < $1
}

function file_arg_verify {      #Accepts two arguments:
                                #$1: the argument which should start with r or c for columns or rows
                                #$2: The file we're going to do work on
    if [[ -f $2 ]]  #Is a valid file
    then
        if [[ -r $2 ]]  #is a readable file
        then
            if [[ ${1:1:1} == "c" ]]  
            then
                columns $2
            elif [[ ${1:1:1} == "r" ]]
            then
                rows $2
            else
                proper_usage
            fi
        else
            bad_file $2
        fi
    else
        bad_file $2
    fi
}

function std_in {   #Another case of me needing to read requirements carefully before starting the assignment
                    #This accepts one argument: the "flag" chosen by the user for columns or rows
                    #This function checks to see if c or r was done correctly, then dumps anything from stdin
                    #into a temp file.  This file is passed on and treated the same way as if a normal file was
                    #inputed in the function as the start
    if [[ ${1:1:1} == "c" ]]
    then
        arg="c"
    elif [[ ${1:1:1} == "r" ]]
    then
        arg="r"
    else
        proper_usage
    fi

    TMP_FILE=file_ps$$

    while read line
    do
        printf "%s	" "$line" >> $TMP_FILE
        echo "" >> $TMP_FILE
    done < /dev/stdin

    file_arg_verify $1 $TMP_FILE
    rm -f $TMP_FILE
}

#These briefly check if we have the correct number of arguments and then determine if we should go the 
#normal file input route or the something was piped in via stdin route

if [[ $# -eq 2 ]]
then
    file_arg_verify $1 $2
elif [[ $# -eq 1 ]]
then
    std_in $1
else
    proper_usage
fi
